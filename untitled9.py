# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zQmsmgJt9vbKutC3MCGt5PuEVoAa038W
"""

!pip install pandas

import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/MyDrive/DATASET/Housing.csv')
df

import matplotlib.pyplot as plt
fig, ax = plt.subplots()

for ac_status, group in df.groupby('airconditioning'):
    ax.scatter(x=group['area'], y=group['price'], label=f"AC: {ac_status}")

plt.legend(loc='upper left')
plt.title('Sebaran Luas Area vs Harga Berdasarkan Status AC')
plt.xlabel('Luas Area')
plt.ylabel('Harga Rumah')
plt.grid(True)
plt.show()

import numpy as np

x_train = np.array(df[['area', 'price']])
y_train = np.array(df['airconditioning'])

print(f'x_train:\n{x_train}\n')
print(f'y_train: {y_train}')

from sklearn.preprocessing import LabelBinarizer

lb = LabelBinarizer()
y_train = lb.fit_transform(y_train)

print(f'y_train: {y_train}')

# Mengubah y_train menjadi array 1D
y_train = y_train.flatten()

# Menampilkan hasil
print(f'y_train: {y_train}')

from sklearn.neighbors import KNeighborsClassifier

K = 3
model = KNeighborsClassifier(n_neighbors=K)
model.fit(x_train, y_train)

# data baru dengan area dan price
area = 4500  # Luas area
price = 8500000  # Harga rumah

# Membuat array untuk data baru
x_new = np.array([area, price]).reshape(1, -1)
x_new

y_new = model.predict(x_new)
y_new

lb.inverse_transform(y_new)

import matplotlib.pyplot as plt

# Membuat plot
fig, ax = plt.subplots()

# Mengelompokkan data berdasarkan status 'airconditioning'
for status_ac, grup in df.groupby('airconditioning'):
    ax.scatter(x=grup['area'], y=grup['price'], label=f"AC: {status_ac}")

plt.scatter(area,
            price,
            marker='s',
            color='red',
            label='Misterius')

# Menambahkan legend dan label
plt.legend(loc='upper left')
plt.title('Sebaran Luas Area dan Harga Rumah Berdasarkan Status AC')
plt.xlabel('Luas Area')
plt.ylabel('Harga Rumah')
plt.grid(True)

# Menampilkan plot
plt.show()

misterius = np.array([area, price])
misterius

x_train

from scipy.spatial.distance import euclidean

data_jarak = [euclidean(misterius, d) for d in x_train]
data_jarak

df['jarak'] = data_jarak
df.sort_values(['jarak'])

x_test = np.array([[5000, 4500000], [6000, 5000000], [4000, 3500000], [7000, 7500000]])
y_test = np.array(['YES', 'YES', 'NO', 'YES'])

print(f'x_test:\n{x_test}\n')
print(f'y_test:\n{y_test}')

y_pred = model.predict(x_test)
y_pred

from sklearn.metrics import accuracy_score

acc = accuracy_score(y_test, y_pred)


print(f'Accuracy: {acc}')

from sklearn.preprocessing import LabelBinarizer
from sklearn.metrics import precision_score

# Misalnya, y_test adalah label asli yang berupa string ("YES" dan "NO")
y_test = np.array(['YES', 'YES', 'NO', 'YES'])

# Transformasi y_test menjadi angka (0 dan 1)
lb = LabelBinarizer()
y_test = lb.fit_transform(y_test).flatten()

# Misalnya y_pred adalah hasil prediksi model KNN (model sudah dilatih sebelumnya)
y_pred = model.predict(x_test)

# Memastikan y_test dan y_pred dalam format yang sama (biner)
print(f'y_test: {y_test}')
print(f'y_pred: {y_pred}')

# Menghitung precision
prec = precision_score(y_test, y_pred)

print(f'Precision: {prec}')

from sklearn.metrics import recall_score

rec = recall_score(y_test, y_pred)

print(f'Recall: {rec}')

from sklearn.metrics import f1_score

f1 = f1_score(y_test, y_pred)

print(f'F1 Score: {f1}')

from sklearn.metrics import classification_report

cls_report = classification_report(y_test, y_pred)

print(f'Classification Report:\n{cls_report}')

from sklearn.metrics import matthews_corrcoef

mcc = matthews_corrcoef(y_test, y_pred)

print(f'MCC: {mcc}')